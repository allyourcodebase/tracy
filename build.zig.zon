.{
    // This is the default name used by packages depending on this one. For
    // example, when a user runs `zig fetch --save <url>`, this field is used
    // as the key in the `dependencies` table. Although the user can choose a
    // different name, most users will stick with this provided value.
    //
    // It is redundant to include "zig" in this name because it is already
    // within the Zig package namespace.
    .name = "tracy",
    // This is a [Semantic Version](https://semver.org/).
    // In a future version of Zig it will be used for package deduplication.
    .version = "0.11.1",
    // This field is optional.
    // This is currently advisory only; Zig does not yet do anything
    // with this value.
    .minimum_zig_version = "0.13.0",
    // This field is optional.
    // Each dependency must either provide a `url` and `hash`, or a `path`.
    // `zig build --fetch` can be used to fetch all dependencies of a package, recursively.
    // Once all dependencies are fetched, `zig build` no longer requires
    // internet connectivity.
    .dependencies = .{
        // See `zig fetch --save <url>` for a command-line interface for adding dependencies.
        //.example = .{
        //    // When updating this field to a new URL, be sure to delete the corresponding
        //    // `hash`, otherwise you are communicating that you expect to find the old hash at
        //    // the new URL.
        //    .url = "https://example.com/foo.tar.gz",
        //
        //    // This is computed from the file contents of the directory of files that is
        //    // obtained after fetching `url` and applying the inclusion rules given by
        //    // `paths`.
        //    //
        //    // This field is the source of truth; packages do not come from a `url`; they
        //    // come from a `hash`. `url` is just one of many possible mirrors for how to
        //    // obtain a package matching this `hash`.
        //    //
        //    // Uses the [multihash](https://multiformats.io/multihash/) format.
        //    .hash = "...",
        //
        //    // When this is provided, the package is found in a directory relative to the
        //    // build root. In this case the package's hash is irrelevant and therefore not
        //    // computed. This field and `url` are mutually exclusive.
        //    .path = "foo",
        //
        //    // When this is set to `true`, a package is declared to be lazily
        //    // fetched. This makes the dependency only get fetched if it is
        //    // actually used.
        //    .lazy = false,
        //},

        .imgui = .{ // Dear ImGui: Bloat-free Graphical User interface
            .url = "git+https://github.com/ocornut/imgui.git?ref=v1.91.0-docking#139e99ca37a3e127c87690202faec005cd892d36",
            .hash = "12206fc96f16c1835444b709f20704d92e636098e73a04ea1cf6b08ea51a3b1c6a2b",
        },
        .glfw = .{ // A fork of GLFW packaged for the Zig build system
            .url = "git+https://github.com/allyourcodebase/glfw.git#e6f377baed70a7bef9fa08d808f40b64c5136bf6",
            .hash = "1220c15e66c13f9633fcfd50b5ed265f74f2950c98b1f1defd66298fa027765e0190",
            .lazy = true,
        },
        .capstone = .{ // Availability for capstone as Zig dependency
            .url = "git+https://github.com/allyourcodebase/capstone.git#a9067fbeaf0049b812a249c237e62408c3fd3df7",
            .hash = "122062cee55ea063b596d72f2d32fc3ab60551ffc1433533ab2d79f07062d4565720",
            .lazy = true,
        },
        .zstd = .{ // zstd ported to the zig build system
            .url = "git+https://github.com/allyourcodebase/zstd.git?ref=1.5.6-1#3247ffbcbc31f014027a5776a25c4261054e9fe9",
            .hash = "12200dbfe91946451bab186f584edbec9f9f7fdbcf818ad984b7182fea655b3c10e3",
            .lazy = true,
        },
        .lz4 = .{ // lz4 ported to the zig build system
            .url = "git+https://github.com/allyourcodebase/lz4.git?ref=1.10.0-1#12b7e6d70a54a5c0f984abdde02449aa2131c0f0",
            .hash = "122070136dfb55e09993ea332aad05eed39a150e624d195bb4397a80531d50a8d176",
            .lazy = true,
        },
        .ini = .{ // A tiny ANSI C library for loading .ini config files
            .url = "git+https://github.com/rxi/ini.git#13a254c9e38def8924a83badfea5eda5a01b9295",
            .hash = "12207f1ff95171d2d8cfefc30a8032ef5cded02b4a2ec1dd0d10fe856b70e0fb2bd7",
        },
        .@"nativefiledialog-extended" = .{ // nativefiledialog-extended ported to the zig build system
            .url = "git+https://github.com/allyourcodebase/nativefiledialog-extended.git?ref=1.2.1#9cd327447daca85779705350606b6bd4dd330a4f",
            .hash = "12207c1a4d33b3d3a3a9247844e21cc0389b4f62423a645ec94fb129c434cda60cda",
        },
        .rpmalloc = .{ // Public domain cross platform lock free thread caching 16-byte aligned memory allocator implemented in C
            .url = "git+https://github.com/mjansson/rpmalloc.git?ref=1.4.5#e4393ff85585d91400bcbad2e7266c011075b673",
            .hash = "12204a577bf30faa734406dfb357fb94da75c2cac0af147bf65c7aad76e6ea026cef",
        },
        .getopt_port = .{ // BSD-licensed getopt implementation
            .url = "git+https://github.com/kimgr/getopt_port.git#9d3d387087d252970923db7f297f681622c4e026",
            .hash = "1220976a6e2a19baa5fbe1669641f9b06443518ea7feda8c7d95bed9b6d39093dac0",
        },
        .freetype = .{ // A fork of freetype packaged for the Zig build system
            .url = "git+https://github.com/hexops/freetype.git#e8c5b37f320db03acba410d993441815bc809606",
            .hash = "1220babb7939707ca390b934657dfd3c8c3a6a78cc9442e4cbd43e3f9ffd49daec9e",
            .lazy = true,
        },
        .wayland = .{
            .url = "git+https://github.com/allyourcodebase/wayland.git?ref=1.23.1#0dc931e0da2780616d840720c2657c16b202963e",
            .hash = "1220f50cb70832e8a432c74631c174340b2c969c64bdd486c5b3ce3a80d52d956346",
            .lazy = true,
        },
        .@"wayland-protocols" = .{
            .url = "git+https://gitlab.freedesktop.org/wayland/wayland-protocols.git?1.38#1f5f2b50ea2d88a9cc307902de2c8ed6b6d86f7d",
            .hash = "122083f9bd770b53ed461bed44b0f3f9c42c69d822fe3c332a528576aa948511d90e",
            .lazy = true,
        },
        .libxkbcommon = .{
            .url = "git+https://github.com/allyourcodebase/libxkbcommon.git?ref=1.7.0#52c5d546581c05de2a30c8bdf602b440c52cd5df",
            .hash = "122071d08009e46324ae43ee081c69f5f144b83e9034560a41a484e5928811e53011",
            .lazy = true,
        },

        // C/C++ header-only dependencies

        .stb = .{ // single-file public domain libraries
            .url = "git+https://github.com/nothings/stb.git#ae721c50eaf761660b4f90cc590453cdb0c2acd0",
            .hash = "1220619c06a947cfacce985293ff16994db6058f2369d3c2ffcf9da60d7caa8b2f9b",
        },
        .dtl = .{ // diff template library
            .url = "git+https://github.com/cubicdaiya/dtl.git?ref=v1.20#cd45dd48089c6e9f7a595d920ddfb82c08d59150",
            .hash = "122087a3c6a0d6583422f488f6d23111280edd686201e23a0c3d13ecdc3f83a2f020",
        },
        .@"nlohmann-json" = .{ // JSON for Modern C++
            .url = "git+https://github.com/nlohmann/json.git?ref=v3.11.3#9cca280a4d0ccf0c08f47a99aa71d1b0e52f8d03",
            .hash = "12203ada5de99b48676019c52ad8ea06a5cae74319c5f1fe5aaf020ec9636872f423",
        },
        .pdqsort = .{ // Pattern-defeating quicksort.
            .url = "git+https://github.com/orlp/pdqsort#b1ef26a55cdb60d236a5cb199c4234c704f46726",
            .hash = "12205753d239db241243ecde78912886dac72a3f5e91455976539159178a7d7a02ff",
        },
        // THIS PROJECT HAS BEEN ARCHIVED
        .@"robin-hood-hashing" = .{ // Fast & memory efficient hashtable based on robin hood hashing
            .url = "git+https://github.com/martinus/robin-hood-hashing#7697343363af4cc3f42cab17be49e6af9ab181e2",
            .hash = "1220ea1db414bf66b8944aff517b6b5de5b909653a5f79b30cba3a3955032698e46e",
        },
        .xxHash = .{ // Extremely fast non-cryptographic hash algorithm
            .url = "git+https://github.com/Cyan4973/xxHash#a57f6cce2698049863af8c25787084ae0489d849",
            .hash = "12207db6e103b233a3fcf06eaa1be27de8bc85036d090c2637a838c9a1e1dffcbf41",
        },
    },
    // Specifies the set of files and directories that are included in this package.
    // Only files and directories listed here are included in the `hash` that
    // is computed for this package. Only files listed here will remain on disk
    // when using the zig package manager. As a rule of thumb, one should list
    // files required for compilation plus any license(s).
    // Paths are relative to the build root. Use the empty string (`""`) to refer to
    // the build root itself.
    // A directory listed here means that all files within, recursively, are included.
    .paths = .{
        "capture",
        "csvexport",
        "import",
        "include",
        "profiler",
        "public",
        "server",
        "update",

        "build.zig",
        "build.zig.zon",
        "LICENSE",
        "README.md",
    },
}
